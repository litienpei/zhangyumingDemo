一.场景
    1.1 场景简介
        在给(org.opens.mybatisplus.service.impl.UserServiceImpl)类中的某个方法配置好事务之后, 请求时控制台打印出了起用
        了事务, 但是数据库的数据还是没有回来, 在各种检查之后, 确定程序没有任何问题后, 最终在一个博客上找到了答案.
    1.2 事务的控制台输出(使用mybatis自带的日志插件)
        -输出
            Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@412f1a69]
            Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@412f1a69]
            Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@412f1a69]
    1.3 事务失效的原因
        -简介
            由于在创建org.opens.mybatisplus.pojo.UserDemo这个pojo对应的表是jpa自动创建的, 在测试mybatis时依旧使用了jpa
            自建的表, 但是有一个问题就是jap自建表如果不指定"表引擎"时, 默认使用MyISAM引擎, 但是只有INNODB引擎是支持事务的, 所
            以尝试更改该事务所对应的表的数据引擎为INNODB之后再次尝试事务操作, 发现事务执行成功.
        -结论
            java程序中的事务最终还是由数据库实现的, 但是数据库中部分不同的数据引擎所创建的表的特性是不同的, 例如:
            1. INNODB引擎支持事务, MyISAM引擎不支持事务;
            2. jpa根据配置文件中的参数设置jpa.hibernate.ddl-auto: update的话会自动更新或者创建数据表结构, 所以生产服务器上
            应该关闭这功能, 这个功能比较危险.
        -引申
            1.如果必须使用jpa自建表时, 可以使用下面的配置文件属性来限定自建表时使用的数据引擎:
                spring.jpa.database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
            2.jpa.hibernate.ddl-auto可以取的值意义说明:
                ...ddl-auto:create----每次运行该程序，没有表格会新建表格，表内有数据会清空
                ...ddl-auto:create-drop----每次程序结束的时候会清空表
                ...ddl-auto:update----每次运行程序，没有表格会新建表格，表内有数据不会清空，只会更新
                ...ddl-auto:validate----运行程序会校验数据与数据库的字段类型是否相同，不同会报错